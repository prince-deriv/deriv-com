{"version":3,"sources":["webpack://deriv-com/./src/pages/landing/stocks/_parallelogram.js"],"names":["StyledSection","styled","SectionContainer","MainWrapper","Container","device","Content","Flex","props","margin_right","margin_left","Text","ImageWrapper","StyledHeader","Header","Row","flex_direction","trading","reverse","two_title","data","useStaticQuery","fd","map","item","index","is_even","key","type","title","subtitle","mt","second_title","second_subtitle","image_name","alt","image_alt","width"],"mappings":"0LAQMA,GAAgBC,QAAOC,MAAV,gFAAGD,CAAH,6GAKbE,GAAcF,QAAOG,MAAV,8EAAGH,CAAH,4BACJI,aAKPC,GAAUL,QAAOM,MAAV,0EAAGN,CAAH,kOAGO,SAACO,GAAD,OAAWA,EAAMC,gBAClB,SAACD,GAAD,OAAWA,EAAME,cAE9BC,KAGWN,YAOJA,aAOPO,EAAeX,oBAAH,oEAAGA,CAAH,wGAGE,SAACO,GAAD,OAAWA,EAAMC,eAExBJ,aAMPQ,GAAeZ,QAAOa,MAAV,+EAAGb,CAAH,oFAGLI,aAMPU,EAAMd,oBAAH,2DAAGA,CAAH,+HACa,SAACO,GAAD,OAAWA,EAAMQ,iBAS1BX,aA2Fb,UA5CsB,SAAC,GAAqC,IAAnCY,EAAkC,EAAlCA,QAASC,EAAyB,EAAzBA,QAASC,EAAgB,EAAhBA,UACjCC,GAAOC,oBA5CN,aA6CP,OACI,gBAACrB,EAAD,KACI,gBAACG,EAAD,CAAamB,GAAG,UACXL,EAAQM,KAAI,SAACC,EAAMC,GAChB,IAAIC,EAAUR,GAAWO,EAAQ,GAAK,EAAIA,EAAQ,EAClD,OACI,gBAACV,EAAD,CAAKC,eAAiBU,EAAkB,cAAR,MAAuBC,IAAKF,GACxD,gBAACnB,EAAD,KACI,gBAACO,EAAD,CAAce,KAAK,iBAAiBJ,EAAKK,OACzC,gBAAC,KAAD,KAAOL,EAAKM,UACXX,GACG,gCACI,gBAACN,EAAD,CAAce,KAAK,aAAaG,GAAG,UAC9BP,EAAKQ,cAEV,gBAAC,KAAD,KAAOR,EAAKS,mBAIvBT,EAAKU,YACF,gBAACtB,EAAD,CAAcH,aAAeiB,EAAgB,SAAN,KACnC,gBAAC,KAAD,CACIN,KAAMA,EAAKI,EAAKU,YAChBC,IAAKX,EAAKY,UACVC,MAAM","file":"6160-f749e11bfdd673febc74.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport PropTypes from 'prop-types'\nimport { graphql, useStaticQuery } from 'gatsby'\nimport device from 'themes/device'\nimport { Container, SectionContainer, Flex } from 'components/containers'\nimport { Header, Text, QueryImage } from 'components/elements'\n\nconst StyledSection = styled(SectionContainer)`\n    background-color: var(--color-grey-30);\n    clip-path: polygon(0 0, 100% 4%, 100% 100%, 0 96%);\n    padding: 64px 16px;\n`\nconst MainWrapper = styled(Container)`\n    @media ${device.tabletL} {\n        width: 100%;\n    }\n`\n\nconst Content = styled(Flex)`\n    width: 60%;\n    flex-direction: column;\n    margin-right: ${(props) => props.margin_right};\n    margin-left: ${(props) => props.margin_left};\n\n    ${Text} {\n        margin-top: 2.2rem;\n        font-size: 2.4rem;\n        @media ${device.tabletL} {\n            margin-top: 8px;\n            font-size: 20px;\n            text-align: center;\n        }\n    }\n\n    @media ${device.tabletL} {\n        width: 100%;\n        max-width: 58.8rem;\n        margin: 0 auto;\n    }\n`\n\nconst ImageWrapper = styled.div`\n    display: flex;\n    width: 40%;\n    margin-right: ${(props) => props.margin_right};\n\n    @media ${device.tabletL} {\n        margin: 2rem auto;\n        max-width: 58.8rem;\n        width: 100%;\n    }\n`\nconst StyledHeader = styled(Header)`\n    line-height: 1.25;\n\n    @media ${device.tabletL} {\n        font-size: 40px;\n        line-height: 50px;\n        text-align: center;\n    }\n`\nconst Row = styled.div`\n    flex-direction: ${(props) => props.flex_direction};\n    width: 100%;\n    display: flex;\n    margin-top: 4rem;\n\n    &:first-child {\n        margin-top: 0;\n    }\n\n    @media ${device.tabletL} {\n        flex-direction: column;\n    }\n`\nconst query = graphql`\n    query {\n        dbot_strategy: file(relativePath: { eq: \"dbot-strategy.png\" }) {\n            ...fadeIn\n        }\n        dbot_build_strategy: file(relativePath: { eq: \"dbot-build-strategy.png\" }) {\n            ...fadeIn\n        }\n        dbot_maximise_profits: file(relativePath: { eq: \"dbot-maximise-profits.png\" }) {\n            ...fadeIn\n        }\n        dbot_track_your_performance: file(relativePath: { eq: \"dbot-track-your-performance.png\" }) {\n            ...fadeIn\n        }\n        dbot_get_integrated_help: file(relativePath: { eq: \"dbot-get-integrated-help.png\" }) {\n            ...fadeIn\n        }\n        dbot_save_your_strategies: file(relativePath: { eq: \"dbot-save-your-strategies.png\" }) {\n            ...fadeIn\n        }\n        dmt_5_ipad_iphone: file(relativePath: { eq: \"dmt-5-ipad-iphone.png\" }) {\n            ...fadeIn\n        }\n        dmt_5_mac: file(relativePath: { eq: \"dmt-5-mac.png\" }) {\n            ...fadeIn\n        }\n        make_smarter: file(relativePath: { eq: \"make-smarter.png\" }) {\n            ...fadeIn\n        }\n        trade_what_you_want: file(relativePath: { eq: \"trade-what-you-want.png\" }) {\n            ...fadeIn\n        }\n        how_you_want: file(relativePath: { eq: \"how-you-want.png\" }) {\n            ...fadeIn\n        }\n        stocks_zero_fees: file(relativePath: { eq: \"stock-indices/stocks-zero-fees.png\" }) {\n            ...fadeIn\n        }\n        stocks_blue_chip: file(relativePath: { eq: \"stock-indices/stocks-blue-chip.png\" }) {\n            ...fadeIn\n        }\n    }\n`\nconst Parallelogram = ({ trading, reverse, two_title }) => {\n    const data = useStaticQuery(query)\n    return (\n        <StyledSection>\n            <MainWrapper fd=\"column\">\n                {trading.map((item, index) => {\n                    let is_even = reverse ? (index + 1) % 2 : index % 2\n                    return (\n                        <Row flex_direction={!is_even ? 'row' : 'row-reverse'} key={index}>\n                            <Content>\n                                <StyledHeader type=\"display-title\">{item.title}</StyledHeader>\n                                <Text>{item.subtitle}</Text>\n                                {two_title && (\n                                    <>\n                                        <StyledHeader type=\"page-title\" mt=\"2.4rem\">\n                                            {item.second_title}\n                                        </StyledHeader>\n                                        <Text>{item.second_subtitle}</Text>\n                                    </>\n                                )}\n                            </Content>\n                            {item.image_name && (\n                                <ImageWrapper margin_right={!is_even ? '0' : '2.4rem'}>\n                                    <QueryImage\n                                        data={data[item.image_name]}\n                                        alt={item.image_alt}\n                                        width=\"100%\"\n                                    />\n                                </ImageWrapper>\n                            )}\n                        </Row>\n                    )\n                })}\n            </MainWrapper>\n        </StyledSection>\n    )\n}\n\nParallelogram.propTypes = {\n    reverse: PropTypes.bool,\n    trading: PropTypes.array,\n    two_title: PropTypes.bool,\n}\n\nexport default Parallelogram\n"],"sourceRoot":""}