{"version":3,"sources":["webpack://deriv-com/./src/pages/cancel.jsx","webpack://deriv-com/./src/pages/cancellablePromise.js","webpack://deriv-com/./src/pages/page-2.jsx"],"names":["WithIntl","useState","current_page","setCurrentPage","map","page","key","onClick","mt","promise","isCancelled","value","Promise","res","rej","rejectPromise","i","console","log","then","d","catch","e","cancel","data","setData","useEffect","cancellablePromise","resolve","setTimeout","message","JSON","stringify"],"mappings":"yLAiCA,WAAeA,SAAf,EA1Be,WACX,OAAuCC,cAAS,GAAzCC,EAAP,KAAqBC,EAArB,KAEA,OACI,gBAAC,KAAD,KACI,gBAAC,KAAD,uCAEC,CAAC,EAAG,GAAGC,KAAI,SAACC,GAAD,OACR,0BACIC,IAAG,QAAUD,EACbE,QAAS,WACLJ,EAAeE,KAHvB,QAMUA,MAId,gBAAC,KAAD,CAAMG,GAAG,SACY,GAAhBN,GAAqB,0CACL,GAAhBA,GAAqB,gBAAC,UAAD,Y,0CCDtC,UA1B2B,SAACO,GACxB,IAAMC,EAAc,CAAEC,OAAO,GAiB7B,MAAO,CACHF,QAjBmB,IAAIG,SAAQ,SAACC,EAAKC,GACrC,IAAMC,EAAgB,SAACC,GACnBC,QAAQC,IAAI,0BAEZJ,EAAIE,IAGRP,EACKU,MAAK,SAACC,GACH,OAAOV,EAAYC,MAAQI,EAAcL,GAAeG,EAAIO,MAE/DC,OAAM,SAACC,GACJP,EAAcL,EAAYC,MAAQD,EAAcY,SAMxDC,OAAQ,WACJb,EAAYC,OAAQ,M,mGCOhC,UAxBc,WACV,OAAwBV,cAAS,MAA1BuB,EAAP,KAAaC,EAAb,KAoBA,OAVAC,gBAAS,iBAAC,yGAC4BC,aAR3B,IAAIf,SAAQ,SAACgB,GAChBC,YAAW,WACPD,EAAQ,CAAEE,QAAS,mBACpB,SAID,uBACErB,EADF,EACEA,QAASc,EADX,EACWA,OAEjBd,EAAQU,MAAK,SAACC,GACVK,EAAQL,MAJN,kBAOCG,GAPD,2CAQP,IAEIC,EAAO,gCAAGO,KAAKC,UAAUR,IAAY","file":"component---src-pages-cancel-jsx-8cfa6ab0257dcd7082a6.js","sourcesContent":["import React, { useState } from 'react'\n// eslint-disable-next-line import/no-unresolved\nimport Page2 from './page-2'\nimport { WithIntl } from 'components/localization'\nimport { Flex, SectionContainer } from 'components/containers'\nimport { Header } from 'components/elements'\n\nconst Cancel = () => {\n    const [current_page, setCurrentPage] = useState(1)\n\n    return (\n        <SectionContainer>\n            <Header>Promises are made to be broker</Header>\n\n            {[1, 2].map((page) => (\n                <button\n                    key={`page-${page}`}\n                    onClick={() => {\n                        setCurrentPage(page)\n                    }}\n                >\n                    Page {page}\n                </button>\n            ))}\n\n            <Flex mt=\"100px\">\n                {current_page == 1 && <>Page 1</>}\n                {current_page == 2 && <Page2 />}\n            </Flex>\n        </SectionContainer>\n    )\n}\n\nexport default WithIntl()(Cancel)\n","const cancellablePromise = (promise) => {\n    const isCancelled = { value: false }\n    const wrappedPromise = new Promise((res, rej) => {\n        const rejectPromise = (i) => {\n            console.log('Promise was cancelled!')\n\n            rej(i)\n        }\n\n        promise\n            .then((d) => {\n                return isCancelled.value ? rejectPromise(isCancelled) : res(d)\n            })\n            .catch((e) => {\n                rejectPromise(isCancelled.value ? isCancelled : e)\n            })\n    })\n\n    return {\n        promise: wrappedPromise,\n        cancel: () => {\n            isCancelled.value = true\n        },\n    }\n}\n\nexport default cancellablePromise\n","import React, { useEffect, useState } from 'react'\n// eslint-disable-next-line import/default\nimport cancellablePromise from './cancellablePromise'\n\nconst Page2 = () => {\n    const [data, setData] = useState(null)\n\n    const getData = () => {\n        return new Promise((resolve) => {\n            setTimeout(() => {\n                resolve({ message: 'Yellow World' })\n            }, 3000)\n        })\n    }\n\n    useEffect(async () => {\n        const { promise, cancel } = await cancellablePromise(getData())\n\n        promise.then((d) => {\n            setData(d)\n        })\n\n        return cancel\n    }, [])\n\n    return data ? <>{JSON.stringify(data)}</> : 'Loading...'\n}\n\nexport default Page2\n"],"sourceRoot":""}