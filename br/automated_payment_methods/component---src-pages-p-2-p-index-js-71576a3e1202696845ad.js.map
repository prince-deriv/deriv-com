{"version":3,"sources":["webpack://deriv-com/./src/pages/p2p/components/_hero.js","webpack://deriv-com/./src/pages/p2p/components/_dp2p.js","webpack://deriv-com/./src/pages/p2p/index.js"],"names":["BackgroundWrapper","styled","Background","Wrapper","Container","device","ImgWrapper","ImageWrapper","InformationWrapper","Flex","HeroContent","Header","StyledHeader","TryButton","LinkButton","HeroComponent","title","content","background_data","img_data","data","height","direction","as","weight","secondary","to","external","type","target","rel","localize","alt","width","useStaticQuery","min_width","StyledSection","SectionContainer","StyledContainer","Content","props","margin_right","Text","StyledText","Row","flex_direction","P2P","reverse","two_title","map","item","index","is_even","key","subtitle","subtitle_mobile","mt","second_title","second_subtitle","image_name","image_alt","ExchangeSteps","Loadable","P2PBanner","Numbers","Availability","DP2P_CONTENT","translate_text","components","WithIntl","description"],"mappings":"4QAWMA,GAAoBC,QAAOC,KAAV,2EAAGD,CAAH,6BAKjBE,GAAUF,QAAOG,MAAV,iEAAGH,CAAH,8IAKAI,aAMPC,EAAaL,oBAAH,yDAAGA,CAAH,8QAUVM,KASOF,YAIAA,aAMPG,GAAqBP,QAAOQ,MAAV,4EAAGR,CAAH,+KAKXI,YAGAA,WAKAA,YAGAA,aAKPK,GAAcT,QAAOQ,MAAV,qEAAGR,CAAH,+WAKXU,KASON,YACHM,KAIGN,YACHM,KAKGN,YACHM,KAMGN,YACHM,MAKJC,GAAeX,QAAOU,MAAV,sEAAGV,CAAH,4OAOLI,YAKAA,YAKAA,aAKPQ,GAAYZ,QAAOa,MAAV,mEAAGb,CAAH,gQASFI,YAMAA,aAMPU,EAAgB,SAAC,GAAmD,IAAjDC,EAAgD,EAAhDA,MAAOC,EAAyC,EAAzCA,QAASC,EAAgC,EAAhCA,gBAAiBC,EAAe,EAAfA,SACtD,OACI,gBAACnB,EAAD,CAAmBoB,KAAMF,GACrB,gBAACf,EAAD,KACI,gBAACK,EAAD,CAAoBa,OAAO,QAAQC,UAAU,UACzC,gBAACV,EAAD,CAAcW,GAAG,KAAKC,OAAQ,KACzBR,GAEL,gBAACN,EAAD,KACI,gBAAC,KAAD,CAAQa,GAAG,MAAMN,IAErB,gBAACJ,EAAD,CACIY,UAAU,OACVC,GAAG,eACHC,SAAS,OACTC,KAAK,YACLC,OAAO,SACPC,IAAI,wBAEHC,QAAS,kBAGlB,gBAACzB,EAAD,KACI,gBAAC,KAAD,CACIc,KAAMD,EACNa,IAAK,iBACLX,OAAQ,QACRY,MAAO,cA6D/B,EArCa,SAAC,GAAwB,IAAtBjB,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,QACbG,GAAOc,oBAjBN,aAmBP,OACI,2BACI,gBAAC,aAAD,CAAcC,UAAU,OACpB,gBAACpB,EAAD,CACIC,MAAOA,EACPC,QAASA,EACTC,gBAAiBE,EAAI,oBACrBD,SAAUC,EAAI,gBAGtB,gBAAC,YAAD,KACI,gBAACL,EAAD,CACIC,MAAOA,EACPC,QAASA,EACTC,gBAAiBE,EAAI,2BACrBD,SAAUC,EAAI,kBC1N5BgB,GAAgBnC,QAAOoC,MAAV,2EAAGpC,CAAH,4FAINI,aAIPiC,GAAkBrC,QAAOG,MAAV,6EAAGH,CAAH,kDAGRI,aAIPkC,EAAUtC,oBAAH,0DAAGA,CAAH,6NAMO,SAACuC,GAAD,OAAWA,EAAMC,eAE/BC,KAIWrC,YAMJA,aAKPE,EAAeN,oBAAH,+DAAGA,CAAH,kGAIE,SAACuC,GAAD,OAAWA,EAAMC,eAExBpC,aAIPO,GAAeX,QAAOU,MAAV,0EAAGV,CAAH,uHAILI,aAOPsC,GAAa1C,QAAOyC,MAAV,wEAAGzC,CAAH,qGAKHI,aAKPuC,EAAM3C,oBAAH,sDAAGA,CAAH,+IACa,SAACuC,GAAD,OAAWA,EAAMK,iBAS1BxC,aAoEb,EAlDa,SAAC,GAAiC,IAA/ByC,EAA8B,EAA9BA,IAAKC,EAAyB,EAAzBA,QAASC,EAAgB,EAAhBA,UACpB5B,GAAOc,oBAdN,cAeP,OACI,gBAACE,EAAD,KACI,gBAACE,EAAD,KACI,gBAACK,EAAD,MACKZ,QACG,kKAGPe,EAAIG,KAAI,SAACC,EAAMC,GACZ,IAAIC,EAAUL,GAAWI,EAAQ,GAAK,EAAIA,EAAQ,EAClD,OACI,gBAACP,EAAD,CAAKC,eAAiBO,EAAkB,cAAR,MAAuBC,IAAKF,GACxD,gBAACZ,EAAD,CAASE,aAAeW,EAAsB,IAAZ,WAC9B,gBAAC,EAAD,KAAeF,EAAKlC,OACpB,gBAAC,aAAD,KACI,gBAAC,KAAD,KAAOkC,EAAKI,WAEhB,gBAAC,YAAD,KACI,gBAAC,KAAD,KAAOJ,EAAKK,kBAEfP,GACG,gCACI,gBAAC,EAAD,CAAcQ,GAAG,UAAUN,EAAKO,cAChC,gBAAC,KAAD,KAAOP,EAAKQ,mBAIxB,gBAACnD,EAAD,CAAckC,aAAeW,EAAgB,UAAN,KACnC,gBAAC,KAAD,CACIhC,KAAMA,EAAK8B,EAAKS,YAChB3B,IAAKkB,EAAKU,UACV3B,MAAM,iB,WCpIpC4B,GAAgBC,SAAS,kBAAM,kCAC/BC,GAAYD,SAAS,kBAAM,mCAC3BE,GAAUF,SAAS,kBAAM,mCACzBG,GAAeH,SAAS,kBAAM,mCAE9BI,EAAe,CACjB,CACIlD,MAAO,gBAAC,KAAD,CAAUmD,eAAe,cAChCb,SAAU,gBAAC,KAAD,CAAUa,eAAe,qDACnCZ,gBACI,gBAAC,KAAD,CACIY,eAAe,uDACfC,WAAY,CAAC,sBAAIf,IAAK,OAI9BM,WAAY,WACZC,WAAW7B,QAAS,iBAExB,CACIf,MAAO,gBAAC,KAAD,CAAUmD,eAAe,iCAChCb,SAAU,gBAAC,KAAD,CAAUa,eAAe,sDACnCZ,gBACI,gBAAC,KAAD,CAAUY,eAAe,sDAG7BR,WAAY,iBACZC,WAAW7B,QAAS,mBAExB,CACIf,MAAO,gBAAC,KAAD,CAAUmD,eAAe,qCAChCb,SACI,gBAAC,KAAD,CAAUa,eAAe,6EAE7BZ,gBACI,gBAAC,KAAD,CAAUY,eAAe,6EAG7BR,WAAY,iBACZC,WAAW7B,QAAS,yBA8B5B,GAAesC,SAAf,EA1BiB,WACb,OACI,gBAAC,IAAD,KACI,gBAAC,KAAD,CACIrD,OAAOe,QAAS,QAChBuC,aAAavC,QAAS,0CAE1B,gBAAC,EAAD,CACIf,OAAOe,QAAS,wCAChBd,QACI,gBAAC,KAAD,CAAUkD,eAAe,qHAE7BR,WAAW,SAEf,gBAAC,EAAD,CAAMZ,SAAO,EAACD,IAAKoB,IACnB,gBAACF,EAAD,MACA,gBAACH,EAAD,MACA,gBAACI,EAAD,MACA,gBAACF,EAAD,CACI/C,OAAOe,QAAS,kDAChB4B,WAAW","file":"component---src-pages-p-2-p-index-js-71576a3e1202696845ad.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport PropTypes from 'prop-types'\nimport { graphql, useStaticQuery } from 'gatsby'\nimport { Flex, Container, Show } from 'components/containers'\nimport { Header, QueryImage, ImageWrapper } from 'components/elements'\nimport { localize } from 'components/localization'\nimport { Background } from 'components/elements/background-image'\nimport { LinkButton } from 'components/form'\nimport device from 'themes/device.js'\n\nconst BackgroundWrapper = styled(Background)`\n    height: 100%;\n    width: 100%;\n`\n\nconst Wrapper = styled(Container)`\n    justify-content: space-between;\n    background-color: transparent;\n    height: unset;\n\n    @media ${device.tabletL} {\n        flex-direction: column-reverse;\n        justify-content: center;\n    }\n`\n\nconst ImgWrapper = styled.div`\n    width: 100%;\n    height: 100%;\n    max-width: 576px;\n    max-height: 700px;\n\n    .gatsby-image-wrapper {\n        width: 100%;\n        height: 100%;\n    }\n    ${ImageWrapper} {\n        width: 100%;\n        height: 100%;\n\n        picture > img {\n            object-fit: contain !important;\n        }\n    }\n\n    @media ${device.tabletL} {\n        max-width: 313px;\n        max-height: 380px;\n    }\n    @media ${device.mobileL} {\n        max-width: 240px;\n        max-height: 292px;\n    }\n`\n\nconst InformationWrapper = styled(Flex)`\n    width: 100%;\n    max-width: 60.5rem;\n    z-index: 1;\n\n    @media ${device.tabletL} {\n        max-width: 42rem;\n    }\n    @media ${device.tablet} {\n        top: 280px;\n        max-width: 350px;\n        padding: 0 16px;\n    }\n    @media ${device.mobileL} {\n        max-width: 328px;\n    }\n    @media ${device.mobileM} {\n        padding: 0;\n    }\n`\n\nconst HeroContent = styled(Flex)`\n    flex-direction: column;\n    justify-content: flex-start;\n    height: unset;\n\n    ${Header} {\n        font-size: 24px;\n        font-weight: 200;\n        color: var(--color-white);\n        display: flex;\n        margin-top: 1.6rem;\n        line-height: 3.6rem;\n        max-width: 78%;\n    }\n    @media ${device.laptopM} {\n        ${Header} {\n            font-size: 22px;\n        }\n    }\n    @media ${device.tabletL} {\n        ${Header} {\n            font-size: 16px;\n            max-width: 100%;\n        }\n    }\n    @media ${device.mobileL} {\n        ${Header} {\n            font-size: 20px;\n            line-height: 25px;\n            margin-top: 16px;\n        }\n    }\n    @media ${device.mobileS} {\n        ${Header} {\n            max-width: 98%;\n        }\n    }\n`\nconst StyledHeader = styled(Header)`\n    color: var(--color-white);\n    line-height: 10rem;\n    font-weight: 600;\n    display: flex;\n    font-size: 8rem;\n\n    @media ${device.laptopM} {\n        width: 100%;\n        font-size: 6rem;\n        line-height: 8rem;\n    }\n    @media ${device.tabletL} {\n        margin-top: 2rem;\n        font-size: 40px;\n        line-height: 6rem;\n    }\n    @media ${device.mobileL} {\n        line-height: 50px;\n    }\n`\n\nconst TryButton = styled(LinkButton)`\n    padding: 14px 16px;\n    width: min-content;\n    white-space: nowrap;\n    font-size: 14px;\n    margin-top: 3.2rem;\n    margin-bottom: 40px;\n    border: unset;\n\n    @media ${device.mobileL} {\n        padding: 1.5rem 1.6rem;\n        height: 42px;\n        white-space: nowrap;\n        margin-bottom: 2rem;\n    }\n    @media ${device.mobileL} {\n        margin-top: 24px;\n        margin-bottom: 40px;\n    }\n`\n\nconst HeroComponent = ({ title, content, background_data, img_data }) => {\n    return (\n        <BackgroundWrapper data={background_data}>\n            <Wrapper>\n                <InformationWrapper height=\"unset\" direction=\"column\">\n                    <StyledHeader as=\"h1\" weight={500}>\n                        {title}\n                    </StyledHeader>\n                    <HeroContent>\n                        <Header as=\"h2\">{content}</Header>\n                    </HeroContent>\n                    <TryButton\n                        secondary=\"true\"\n                        to=\"/cashier/p2p\"\n                        external=\"true\"\n                        type=\"deriv_app\"\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                    >\n                        {localize('Try DP2P now')}\n                    </TryButton>\n                </InformationWrapper>\n                <ImgWrapper>\n                    <QueryImage\n                        data={img_data}\n                        alt={'p2p background'}\n                        height={'700px'}\n                        width={'576px'}\n                    />\n                </ImgWrapper>\n            </Wrapper>\n        </BackgroundWrapper>\n    )\n}\n\nconst query = graphql`\n    query {\n        p2p_hero_background: file(relativePath: { eq: \"p2p/p2p_hero_background.png\" }) {\n            ...fadeIn\n        }\n        p2p_hero_background_mobile: file(\n            relativePath: { eq: \"p2p/p2p_hero_background_mobile.png\" }\n        ) {\n            ...fadeIn\n        }\n        p2p_hero_img: file(relativePath: { eq: \"p2p/p2p_hero_img.png\" }) {\n            ...fadeIn\n        }\n    }\n`\n\nconst Hero = ({ title, content }) => {\n    const data = useStaticQuery(query)\n\n    return (\n        <div>\n            <Show.Desktop min_width=\"992\">\n                <HeroComponent\n                    title={title}\n                    content={content}\n                    background_data={data['p2p_hero_background']}\n                    img_data={data['p2p_hero_img']}\n                />\n            </Show.Desktop>\n            <Show.Mobile>\n                <HeroComponent\n                    title={title}\n                    content={content}\n                    background_data={data['p2p_hero_background_mobile']}\n                    img_data={data['p2p_hero_img']}\n                />\n            </Show.Mobile>\n        </div>\n    )\n}\n\nHeroComponent.propTypes = {\n    background_data: PropTypes.any,\n    content: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n    img_data: PropTypes.any,\n    title: PropTypes.string,\n}\n\nHero.propTypes = {\n    content: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n    title: PropTypes.string,\n}\n\nexport default Hero\n","import React from 'react'\nimport styled from 'styled-components'\nimport PropTypes from 'prop-types'\nimport { graphql, useStaticQuery } from 'gatsby'\nimport device from 'themes/device'\nimport { Container, SectionContainer, Show } from 'components/containers'\nimport { Header, Text, QueryImage } from 'components/elements'\nimport { localize } from 'components/localization'\n\nconst StyledSection = styled(SectionContainer)`\n    background-color: var(--color-white);\n    padding: 8rem 0 0 0;\n\n    @media ${device.tabletL} {\n        padding: 40px 16px 0;\n    }\n`\nconst StyledContainer = styled(Container)`\n    flex-direction: column;\n\n    @media ${device.tabletL} {\n        width: 100%;\n    }\n`\nconst Content = styled.div`\n    width: 100%;\n    max-width: 58.8rem;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    margin-right: ${(props) => props.margin_right};\n\n    ${Text} {\n        font-size: 2.4rem;\n        margin-top: 0.8rem;\n\n        @media ${device.tabletL} {\n            text-align: center;\n            font-size: 16px;\n        }\n    }\n\n    @media ${device.tabletL} {\n        margin: 0 auto;\n    }\n`\n\nconst ImageWrapper = styled.div`\n    max-width: 47.1rem;\n    width: 100%;\n    max-height: 30rem;\n    margin-right: ${(props) => props.margin_right};\n\n    @media ${device.tabletL} {\n        margin: 2rem auto;\n    }\n`\nconst StyledHeader = styled(Header)`\n    font-size: var(--text-size-l);\n    line-height: 1.25;\n\n    @media ${device.tabletL} {\n        width: 98%;\n        margin-top: 0;\n        text-align: center;\n        font-size: 24px;\n    }\n`\nconst StyledText = styled(Text)`\n    font-size: 3.2rem;\n    line-height: 40px;\n    text-align: center;\n\n    @media ${device.tabletL} {\n        font-size: 16px;\n        line-height: 24px;\n    }\n`\nconst Row = styled.div`\n    flex-direction: ${(props) => props.flex_direction};\n    width: 100%;\n    display: flex;\n    margin-top: 8rem;\n\n    &:first-child {\n        margin-top: 0;\n    }\n\n    @media ${device.tabletL} {\n        flex-direction: column;\n        margin-top: 40px;\n    }\n`\nconst query = graphql`\n    query {\n        buy_sell: file(relativePath: { eq: \"p2p/p2p_buy_sell.png\" }) {\n            ...fadeIn\n        }\n        local_currency: file(relativePath: { eq: \"p2p/p2p_local_currency.png\" }) {\n            ...fadeIn\n        }\n        web_and_mobile: file(relativePath: { eq: \"p2p/p2p_web_and_mobile.png\" }) {\n            ...fadeIn\n        }\n    }\n`\nconst DP2P = ({ P2P, reverse, two_title }) => {\n    const data = useStaticQuery(query)\n    return (\n        <StyledSection>\n            <StyledContainer>\n                <StyledText>\n                    {localize(\n                        'DP2P is Deriv’s peer-to-peer deposit and withdrawal service. It’s where you can get money in and out of your Deriv account via exchanges with fellow traders.',\n                    )}\n                </StyledText>\n                {P2P.map((item, index) => {\n                    let is_even = reverse ? (index + 1) % 2 : index % 2\n                    return (\n                        <Row flex_direction={!is_even ? 'row' : 'row-reverse'} key={index}>\n                            <Content margin_right={!is_even ? '12.6rem' : '0'}>\n                                <StyledHeader>{item.title}</StyledHeader>\n                                <Show.Desktop>\n                                    <Text>{item.subtitle}</Text>\n                                </Show.Desktop>\n                                <Show.Mobile>\n                                    <Text>{item.subtitle_mobile}</Text>\n                                </Show.Mobile>\n                                {two_title && (\n                                    <>\n                                        <StyledHeader mt=\"2.4rem\">{item.second_title}</StyledHeader>\n                                        <Text>{item.second_subtitle}</Text>\n                                    </>\n                                )}\n                            </Content>\n                            <ImageWrapper margin_right={!is_even ? '0' : '12.6rem'}>\n                                <QueryImage\n                                    data={data[item.image_name]}\n                                    alt={item.image_alt}\n                                    width=\"100%\"\n                                />\n                            </ImageWrapper>\n                        </Row>\n                    )\n                })}\n            </StyledContainer>\n        </StyledSection>\n    )\n}\n\nDP2P.propTypes = {\n    P2P: PropTypes.array,\n    reverse: PropTypes.bool,\n    two_title: PropTypes.bool,\n}\n\nexport default DP2P\n","import React from 'react'\nimport Loadable from '@loadable/component'\nimport Hero from './components/_hero'\nimport DP2P from './components/_dp2p'\nimport { localize, Localize, WithIntl } from 'components/localization'\nimport Layout from 'components/layout/layout'\nimport { SEO } from 'components/containers'\nconst ExchangeSteps = Loadable(() => import('./components/_exchange-steps'))\nconst P2PBanner = Loadable(() => import('./components/_p2pbanner'))\nconst Numbers = Loadable(() => import('./components/_numbers'))\nconst Availability = Loadable(() => import('./components/_availability'))\n\nconst DP2P_CONTENT = [\n    {\n        title: <Localize translate_text=\"Save time\" />,\n        subtitle: <Localize translate_text=\"Exchange in minutes. Less waiting, more trading.\" />,\n        subtitle_mobile: (\n            <Localize\n                translate_text=\"Exchange in minutes.<0 />Less waiting, more trading.\"\n                components={[<br key={0} />]}\n            />\n        ),\n\n        image_name: 'buy_sell',\n        image_alt: localize('Buy and sell'),\n    },\n    {\n        title: <Localize translate_text=\"Works in your local currency\" />,\n        subtitle: <Localize translate_text=\"Exchange with fellow traders at pre-agreed rates.\" />,\n        subtitle_mobile: (\n            <Localize translate_text=\"Exchange with fellow traders at pre-agreed rates.\" />\n        ),\n\n        image_name: 'local_currency',\n        image_alt: localize('Local currency'),\n    },\n    {\n        title: <Localize translate_text=\"Available as web and mobile apps\" />,\n        subtitle: (\n            <Localize translate_text=\"Easily make deposits and withdrawals on your desktop and mobile devices.\" />\n        ),\n        subtitle_mobile: (\n            <Localize translate_text=\"Easily make deposits and withdrawals on your desktop and mobile devices.\" />\n        ),\n\n        image_name: 'web_and_mobile',\n        image_alt: localize('Web and mobile apps'),\n    },\n]\n\nconst DP2PHome = () => {\n    return (\n        <Layout>\n            <SEO\n                title={localize('DP2P')}\n                description={localize('Hassle-free deposits and withdrawals')}\n            />\n            <Hero\n                title={localize('Hassle-free deposits and withdrawals')}\n                content={\n                    <Localize translate_text=\"Can’t make deposits and withdrawals in your local currency? No problem. Exchange with fellow traders in minutes.\" />\n                }\n                image_name=\"DP2P\"\n            />\n            <DP2P reverse P2P={DP2P_CONTENT} />\n            <Numbers />\n            <ExchangeSteps />\n            <Availability />\n            <P2PBanner\n                title={localize('Get hassle-free deposits and withdrawals today')}\n                image_name=\"DP2P\"\n            />\n        </Layout>\n    )\n}\n\nexport default WithIntl()(DP2PHome)\n"],"sourceRoot":""}