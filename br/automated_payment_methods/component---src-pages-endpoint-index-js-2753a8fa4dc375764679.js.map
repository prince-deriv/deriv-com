{"version":3,"sources":["webpack://deriv-com/./src/common/validation.js","webpack://deriv-com/./src/components/hooks/use-localstorage-state.js","webpack://deriv-com/./src/pages/endpoint/index.js"],"names":["validation_regex","email","url","alphabetic","number","validation","input","message","test","localize","required","useLocalStorageState","defaultValue","key","useState","sticky_value","isBrowser","window","localStorage","getItem","parseJSONString","value","setValue","useEffect","isNullUndefined","removeItem","setItem","StyledInput","styled","Input","props","background","device","StyledContainer","Container","ButtonContainer","InputGroup","StyledButton","Button","endpointValidation","values","errors","server_url","trimSpaces","app_id","toString","clients_country","server_url_error","app_id_error","clients_country_error","WithIntl","default_server_url","setServerUrl","getAppId","setAppId","React","reset_loading","setResetLoading","DerivStore","website_status","setWebsiteStatus","website_status_loading","handleStatus","setStatus","setTimeout","type","margin_top","title","description","no_index","justify","align","direction","as","mt","weight","mb","initialValues","enableReinitialize","validate","onSubmit","actions","setSubmitting","new_website_status","handleChange","handleBlur","isSubmitting","setFieldValue","isValid","dirty","touched","status","noValidate","name","error","disabled","handleError","onChange","onBlur","label","placeholder","color","tertiary","onClick","resetEndpointSettings","secondary"],"mappings":"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","file":"component---src-pages-endpoint-index-js-2753a8fa4dc375764679.js","sourcesContent":["import { localize } from 'components/localization'\n\nconst validation_regex = {\n    email: /^[a-zA-Z0-9_.+-]+@((?:[\\w]+\\.)+)([a-zA-Z]{2,63}$)/,\n    url: /^[\\w|\\-|.]+$/,\n    alphabetic: /^[a-zA-Z]+$/,\n    number: /^\\d+$/,\n}\n\nconst validation = {\n    // Validation will return a string for error message\n    email: (input, message) => {\n        if (!validation_regex.email.test(input)) {\n            return message ? message : localize('Email is required')\n        } else {\n            return null\n        }\n    },\n    required: (input, message) => {\n        if (!input) {\n            return message ? message : localize('This field is required')\n        } else {\n            return null\n        }\n    },\n    url: (input, message) => {\n        if (!validation_regex.url.test(input)) {\n            return message ? message : localize('Please enter a valid URL format')\n        } else {\n            return null\n        }\n    },\n    number: (input, message) => {\n        if (!validation_regex.number.test(input)) {\n            return message ? message : localize('Please enter a valid number')\n        } else {\n            return null\n        }\n    },\n    alphabetic: (input, message) => {\n        if (!validation_regex.alphabetic.test(input)) {\n            return message ? message : localize('Please enter only alphabetic characters')\n        } else {\n            return null\n        }\n    },\n}\n\nexport default validation\n","import { useState, useEffect } from 'react'\nimport { isBrowser, isNullUndefined, parseJSONString } from 'common/utility'\n\nexport const useLocalStorageState = (defaultValue, key) => {\n    const [value, setValue] = useState(() => {\n        const sticky_value = isBrowser() ? window.localStorage.getItem(key) : null\n        return sticky_value ? parseJSONString(sticky_value) : defaultValue\n    })\n\n    useEffect(() => {\n        if (isBrowser()) {\n            if (isNullUndefined(value)) {\n                window.localStorage.removeItem(key)\n            } else {\n                window.localStorage.setItem(key, value)\n            }\n        }\n    }, [key, value])\n\n    return [value, setValue]\n}\n","import * as React from 'react'\nimport styled from 'styled-components'\nimport { Formik, Form } from 'formik'\nimport device from 'themes/device'\nimport { WithIntl } from 'components/localization'\nimport Layout from 'components/layout/layout'\nimport { Container, SEO } from 'components/containers'\nimport { Header, Text } from 'components/elements'\nimport { Input, Button } from 'components/form'\nimport validation from 'common/validation'\nimport { trimSpaces } from 'common/utility'\nimport { default_server_url } from 'common/constants'\nimport { getAppId } from 'common/websocket/config'\nimport { DerivStore } from 'store'\nimport { useLocalStorageState } from 'components/hooks/use-localstorage-state'\n\nconst StyledInput = styled(Input)`\n    & ~ label {\n        transform: translate(-0.6rem, -2rem) scale(0.7);\n        color: var(--color-black-3);\n        background-color: var(--color-${(props) => props.background || 'grey-1'});\n        @media ${device.tabletL} {\n            top: 9px;\n        }\n    }\n`\n\nconst StyledContainer = styled(Container)`\n    text-align: center;\n    height: 100vh;\n    padding: auto 0;\n    justify-content: start;\n`\n\nconst ButtonContainer = styled.div`\n    margin-top: 2rem;\n`\n\nconst InputGroup = styled.div`\n    width: 40rem;\n    margin: 0 auto 3.4rem;\n\n    & > div {\n        margin-bottom: 1rem;\n    }\n    & > div:last-child {\n        margin-bottom: 0;\n    }\n`\n\nconst StyledButton = styled(Button)`\n    margin: 0.8rem 0.4rem;\n`\n\nconst endpointValidation = (values) => {\n    let errors = {}\n\n    const server_url = trimSpaces(values ? values.server_url : '')\n    const app_id = trimSpaces(values ? values.app_id.toString() : '')\n    const clients_country = trimSpaces(values ? values.clients_country.toString() : '')\n    const server_url_error =\n        validation.required(server_url) ||\n        validation.url(server_url, 'Please enter a valid server URL')\n    const app_id_error =\n        validation.required(app_id) || validation.number(app_id, 'Please enter a valid app ID')\n    const clients_country_error =\n        validation.required(clients_country) || validation.alphabetic(clients_country)\n\n    if (server_url_error) {\n        errors.server_url = server_url_error\n    }\n\n    if (app_id_error) {\n        errors.app_id = app_id_error\n    }\n\n    if (clients_country_error) {\n        errors.clients_country = clients_country_error\n    }\n\n    return errors\n}\n\nconst Endpoint = () => {\n    const [server_url, setServerUrl] = useLocalStorageState(default_server_url, 'config.server_url')\n    const [app_id, setAppId] = useLocalStorageState(getAppId(), 'config.app_id')\n    const [reset_loading, setResetLoading] = React.useState(false)\n    const { website_status, setWebsiteStatus, website_status_loading } =\n        React.useContext(DerivStore)\n    const STATUS_TIMEOUT_DELAY = 1500\n    const RESET_TIMEOUT_DELAY = 500\n\n    const handleStatus = (setStatus, message) => {\n        setStatus({ message })\n        setTimeout(() => {\n            setStatus({})\n        }, STATUS_TIMEOUT_DELAY)\n    }\n    const resetEndpointSettings = (setStatus) => {\n        // reset local storage values\n        setResetLoading(true)\n        setServerUrl()\n        setAppId()\n        // adding the default storage values\n        setTimeout(() => {\n            setServerUrl(default_server_url)\n            setAppId(getAppId())\n            setResetLoading(false)\n        }, RESET_TIMEOUT_DELAY)\n        // reset website status values\n        setWebsiteStatus()\n        handleStatus(setStatus, 'Config has been reset successfully')\n        // TODO: if there is a change requires reload in the future\n        // window.location.reload()\n    }\n    const endpointSubmission = (values, actions) => {\n        actions.setSubmitting(true)\n        setServerUrl(values.server_url)\n        setAppId(values.app_id)\n\n        // handle website status changes\n        const new_website_status = { ...website_status, clients_country: values.clients_country }\n        setWebsiteStatus(new_website_status)\n        actions.setSubmitting(false)\n        handleStatus(actions.setStatus, 'Config has been updated')\n        // TODO: if there is a change requires reload in the future\n        // window.location.reload()\n    }\n\n    return (\n        <Layout type=\"static\" margin_top={'0'}>\n            <SEO title=\"Endpoint\" description=\"Change deriv API endpoint.\" no_index />\n            <StyledContainer justify=\"center\" align=\"center\" direction=\"column\">\n                <Header as=\"h2\" type=\"page-title\" align=\"center\" mt=\"80px\">\n                    Change API endpoint\n                </Header>\n                <Header\n                    as=\"h4\"\n                    type=\"sub-section-title\"\n                    align=\"center\"\n                    weight=\"500\"\n                    mt=\"0.5rem\"\n                    mb=\"3.8rem\"\n                >\n                    Update configuration for API endpoint or other settings\n                </Header>\n                <Formik\n                    initialValues={{\n                        server_url: server_url ? server_url : '',\n                        app_id: app_id ? app_id : '',\n                        // this implicit check is required by formik for `enableReinitialize` to work\n                        clients_country: website_status?.clients_country\n                            ? website_status?.clients_country\n                            : '',\n                    }}\n                    enableReinitialize={true}\n                    validate={endpointValidation}\n                    onSubmit={endpointSubmission}\n                >\n                    {({\n                        values,\n                        errors,\n                        handleChange,\n                        handleBlur,\n                        isSubmitting,\n                        setStatus,\n                        setFieldValue,\n                        isValid,\n                        dirty,\n                        touched,\n                        status,\n                    }) => (\n                        <Form noValidate>\n                            <InputGroup>\n                                <StyledInput\n                                    name=\"server_url\"\n                                    error={errors.server_url}\n                                    value={values.server_url}\n                                    disabled={reset_loading}\n                                    handleError={() => setFieldValue('server_url', '')}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    type=\"text\"\n                                    label=\"Server URL\"\n                                    background=\"white\"\n                                    placeholder={'e.g. green.binaryws.com'}\n                                />\n                                <StyledInput\n                                    name=\"app_id\"\n                                    error={errors.app_id}\n                                    value={values.app_id}\n                                    disabled={reset_loading}\n                                    handleError={() => setFieldValue('app_id', '')}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    type=\"text\"\n                                    label=\"App ID\"\n                                    background=\"white\"\n                                    placeholder={'e.g. 9999'}\n                                />\n                                <StyledInput\n                                    name=\"clients_country\"\n                                    error={errors.clients_country}\n                                    value={values.clients_country}\n                                    disabled={website_status_loading}\n                                    handleError={() => setFieldValue('clients_country', '')}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    type=\"text\"\n                                    label=\"Clients country\"\n                                    background=\"white\"\n                                    placeholder={'e.g. mt (for EU) or gb (for UK) or za (for P2P)'}\n                                />\n                            </InputGroup>\n                            <Text align=\"center\" color=\"green\">\n                                {status?.message && status.message}\n                            </Text>\n                            <ButtonContainer>\n                                <StyledButton\n                                    tertiary\n                                    onClick={() => resetEndpointSettings(setStatus)}\n                                    type=\"button\"\n                                >\n                                    Reset to original settings\n                                </StyledButton>\n                                <StyledButton\n                                    secondary=\"true\"\n                                    disabled={isSubmitting || !dirty || !touched || !isValid}\n                                    type=\"submit\"\n                                >\n                                    Submit changes\n                                </StyledButton>\n                            </ButtonContainer>\n                        </Form>\n                    )}\n                </Formik>\n            </StyledContainer>\n        </Layout>\n    )\n}\n\nexport default WithIntl()(Endpoint)\n"],"sourceRoot":""}