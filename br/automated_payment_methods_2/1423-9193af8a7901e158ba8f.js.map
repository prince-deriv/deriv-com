{"version":3,"sources":["webpack://deriv-com/./src/pages/partners/affiliate-ib/_style.js","webpack://deriv-com/./src/pages/partners/affiliate-ib/_calculated-formula.js","webpack://deriv-com/./src/pages/partners/affiliate-ib/_minimum-volume.js"],"names":["FormulaBottomWrapper","styled","Flex","FormulaContainer","device","FormulaContainerMobileOneLine","FormulaGreen","FormulaHighlight","FormulaResultGreen","FormulaResult","FormulaTopWrapper","props","oneLine","FormulaValueMobile","FormulaValueMobileOneLine","FormulaValueResultSwapSynthetic","FormulaValueSwapSynthetic","PointerContainer","ml","is_top","PointerContainerMobile","PointerDot","PointerStick","PointerText","PointerTextMobile","ResultStrong","itemList","data","list","map","value","index","formula","result","key","indexData","item","description","next_operator","total","totalItem","totalResult","totalResultDesc","nextOperator","StyledSection","SectionContainer","TitleWrapper","Text","Header","StyledHeader","ExampleWrapper","CalculationWrapper","LeftWrapper","RightWrapper","firstCalculatedFormula","translate_text","components","secondCalculatedFormula","direction","type","align","mb","localize","size","ai"],"mappings":"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","file":"1423-9193af8a7901e158ba8f.js","sourcesContent":["import styled from 'styled-components'\nimport { Flex } from 'components/containers'\nimport device from 'themes/device'\n\nexport const FormulaBottomWrapper = styled(Flex)`\n    flex-direction: row;\n    justify-content: flex-end;\n    margin-top: 16px;\n    height: auto;\n`\nexport const FormulaContainer = styled(Flex)`\n    width: 100%;\n    height: 108px;\n    margin: 16px 0 0;\n    border-radius: 8px;\n    border: 1.5px solid var(--color-grey-21);\n    padding: 1.6rem;\n\n    :first-child {\n        margin: 0;\n    }\n\n    @media ${device.tabletL} {\n        height: auto;\n        margin: 8px 0 0;\n\n        :first-child {\n            margin: 8px 0 0;\n        }\n    }\n`\nexport const FormulaContainerMobileOneLine = styled(Flex)`\n    margin: 8px 0 0;\n    border-radius: 8px;\n    border: 1.5px solid var(--color-grey-21);\n    padding: 1.6rem;\n`\nexport const FormulaGreen = styled.span`\n    display: inline-block;\n`\nexport const FormulaHighlight = styled(Flex)`\n    width: 100%;\n    border-radius: 4px;\n    background-color: var(--color-white);\n    align-items: flex-start;\n\n    @media ${device.tabletL} {\n        flex-direction: column;\n        max-width: 300px;\n    }\n`\nexport const FormulaResultGreen = styled.span`\n    display: inline-block;\n    color: var(--color-blue-5);\n    margin-right: 0.8rem;\n`\nexport const FormulaResult = styled.div`\n    border-radius: 4px;\n    background-color: var(--color-grey-39);\n    padding: 0.8rem;\n    margin-left: 2.4rem;\n\n    @media ${device.tabletL} {\n        margin-left: 0.8rem;\n    }\n`\nexport const FormulaTopWrapper = styled(Flex)`\n    flex-direction: row;\n    height: auto;\n    margin-top: ${(props) => (props.oneLine ? '0' : '50px')};\n    align-items: flex-start;\n`\nexport const FormulaValueMobile = styled.div`\n    display: inline-block;\n    text-align: center;\n    margin: 0 1.8rem;\n    position: relative;\n    font-size: 14px;\n    font-weight: normal;\n    color: var(--color-black-3);\n\n    :first-child {\n        margin: 0 2.4rem 0 0;\n    }\n    :last-child {\n        margin: 0 0 0 2.4rem;\n    }\n\n    @media (max-width: 340px) {\n        margin: 0 1.4rem;\n\n        :first-child {\n            margin: 0 1.6rem 0 0;\n        }\n        :last-child {\n            margin: 0 0 0 1.6rem;\n        }\n    }\n`\nexport const FormulaValueMobileOneLine = styled.div`\n    display: inline-block;\n    text-align: center;\n    margin: 0 0.8rem;\n    padding: 0.8rem 0;\n    position: relative;\n    font-size: 14px;\n    font-weight: normal;\n    line-height: 21px;\n    color: var(--color-black-3);\n\n    :first-child {\n        margin: 0 0.8rem 0 0;\n    }\n    :last-child {\n        margin: 0 0 0 0.8rem;\n    }\n`\nexport const FormulaValueResultSwapSynthetic = styled(Flex)`\n    flex-direction: row;\n    text-align: center;\n    font-size: 14px;\n    line-height: 21px;\n    font-weight: normal;\n`\nexport const FormulaValueSwapSynthetic = styled.div`\n    display: inline-block;\n    text-align: center;\n    font-size: 14px;\n    line-height: 21px;\n    color: var(--color-black-3);\n    font-weight: normal;\n    margin-top: 0.8rem;\n    margin-left: 1.8rem;\n    margin-right: 1.8rem;\n`\nexport const PointerContainer = styled.div`\n    display: flex;\n    margin-top: 8px;\n    flex-direction: column;\n    align-items: center;\n    margin-left: ${(props) => props.ml || '0'};\n\n    @media ${device.tabletL} {\n        position: absolute;\n        margin-top: ${(props) => (props.is_top ? '0' : '8px')};\n        flex-direction: ${(props) => (props.is_top ? 'column-reverse' : 'column')};\n        top: ${(props) => (props.is_top ? '-16px' : 'unset')};\n        margin-left: ${(props) => (props.is_top ? '0' : '20px')};\n        left: ${(props) => (props.is_top ? '50%' : 'unset')};\n        transform: ${(props) => (props.is_top ? 'translate(-50%, -50%)' : 'unset')};\n    }\n`\nexport const PointerContainerMobile = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    margin-left: ${(props) => props.ml || '0'};\n`\nexport const PointerDot = styled.div`\n    height: 5px;\n    width: 5px;\n    border: 1px solid black;\n    border-radius: 50%;\n    opacity: 0.1;\n`\nexport const PointerStick = styled.div`\n    position: relative;\n    height: 16px;\n    width: 1px;\n    background-color: black;\n    opacity: 0.1;\n`\nexport const PointerText = styled.div`\n    font-size: 14px;\n    font-weight: normal;\n    color: var(--color-grey-5);\n    position: absolute;\n    margin-top: 20px;\n\n    @media ${device.tabletL} {\n        width: 110px;\n        margin: ${(props) => (props.is_top ? '0 0 26px' : '26px 0 0')};\n        right: ${(props) => (props.is_top ? '-8px' : 'unset')};\n        left: ${(props) => (props.is_top ? 'unset' : '-20px')};\n        text-align: ${(props) => (props.is_top ? 'right' : 'left')};\n    }\n\n    @media (max-width: 340px) {\n        font-size: 12px;\n    }\n`\nexport const PointerTextMobile = styled.div`\n    font-size: 14px;\n    font-weight: normal;\n    color: var(--color-grey-5);\n    line-height: 21px;\n    text-align: center;\n\n    @media (max-width: 340px) {\n        font-size: 12px;\n    }\n`\nexport const ResultStrong = styled.span`\n    font-weight: bold;\n    margin-right: 0.4rem;\n    color: var(--color-black-3);\n`\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {\n    FormulaBottomWrapper,\n    FormulaContainer,\n    FormulaContainerMobileOneLine,\n    FormulaGreen,\n    FormulaHighlight,\n    FormulaResultGreen,\n    FormulaResult,\n    FormulaTopWrapper,\n    FormulaValueMobile,\n    FormulaValueMobileOneLine,\n    FormulaValueResultSwapSynthetic,\n    FormulaValueSwapSynthetic,\n    PointerContainer,\n    PointerContainerMobile,\n    PointerDot,\n    PointerStick,\n    PointerText,\n    PointerTextMobile,\n} from './_style'\nimport { Show } from 'components/containers'\n\nconst CalculatedFormula = ({ data }) => {\n    const itemList = data.list\n\n    return (\n        <>\n            <Show.Desktop>\n                {itemList.map((value, index) => {\n                    const { formula, result } = value\n                    return (\n                        <FormulaContainer key={index}>\n                            <FormulaHighlight>\n                                {formula.map((list, indexData) => (\n                                    <>\n                                        <FormulaValueSwapSynthetic key={indexData}>\n                                            {list.item}\n                                            <PointerContainer>\n                                                <PointerDot />\n                                                <PointerStick />\n                                                <PointerText>{list.description}</PointerText>\n                                            </PointerContainer>\n                                        </FormulaValueSwapSynthetic>\n                                        {list.next_operator && (\n                                            <FormulaValueSwapSynthetic>\n                                                <FormulaGreen>{list.next_operator}</FormulaGreen>\n                                            </FormulaValueSwapSynthetic>\n                                        )}\n                                    </>\n                                ))}\n                                <FormulaResult>\n                                    <FormulaValueResultSwapSynthetic>\n                                        <FormulaResultGreen>=</FormulaResultGreen>\n                                        {result.total}\n                                        {result.description && result.description}\n                                    </FormulaValueResultSwapSynthetic>\n                                </FormulaResult>\n                            </FormulaHighlight>\n                        </FormulaContainer>\n                    )\n                })}\n            </Show.Desktop>\n            <Show.Mobile>\n                <>\n                    {itemList.map((value, index) => {\n                        const { totalItem, formula } = value\n                        const totalResult = value.result.total\n                        const totalResultDesc = value.result.description\n                        const totalNumberofOperation = 2\n                        return totalItem > totalNumberofOperation ? (\n                            <FormulaContainer key={index}>\n                                <FormulaHighlight>\n                                    <FormulaTopWrapper>\n                                        {formula.map((list, indexData) => {\n                                            const { item, description } = list\n                                            const nextOperator = list.next_operator\n\n                                            return (\n                                                <>\n                                                    <FormulaValueMobile key={indexData}>\n                                                        {item}\n                                                        <PointerContainer is_top={indexData > 0}>\n                                                            <PointerDot />\n                                                            <PointerStick />\n                                                            <PointerText is_top={indexData > 0}>\n                                                                {description}\n                                                            </PointerText>\n                                                        </PointerContainer>\n                                                    </FormulaValueMobile>\n\n                                                    {nextOperator && (\n                                                        <FormulaValueMobile>\n                                                            <FormulaGreen>\n                                                                {nextOperator}\n                                                            </FormulaGreen>\n                                                        </FormulaValueMobile>\n                                                    )}\n                                                </>\n                                            )\n                                        })}\n                                    </FormulaTopWrapper>\n                                    <FormulaBottomWrapper>\n                                        <FormulaResult>\n                                            <FormulaValueResultSwapSynthetic>\n                                                <FormulaResultGreen>=</FormulaResultGreen>\n                                                {totalResult} {totalResultDesc}\n                                            </FormulaValueResultSwapSynthetic>\n                                        </FormulaResult>\n                                    </FormulaBottomWrapper>\n                                </FormulaHighlight>\n                            </FormulaContainer>\n                        ) : (\n                            <FormulaContainerMobileOneLine>\n                                <FormulaHighlight>\n                                    <FormulaTopWrapper oneLine>\n                                        {formula.map((list, indexData) => {\n                                            const { item, description } = list\n                                            const nextOperator = list.next_operator\n\n                                            return (\n                                                <>\n                                                    <FormulaValueMobileOneLine key={indexData}>\n                                                        {item}\n                                                        <PointerContainerMobile>\n                                                            <PointerDot />\n                                                            <PointerStick />\n                                                            <PointerTextMobile>\n                                                                {description}\n                                                            </PointerTextMobile>\n                                                        </PointerContainerMobile>\n                                                    </FormulaValueMobileOneLine>\n                                                    {nextOperator && (\n                                                        <FormulaValueMobileOneLine>\n                                                            <FormulaGreen>\n                                                                {nextOperator}\n                                                            </FormulaGreen>\n                                                        </FormulaValueMobileOneLine>\n                                                    )}\n                                                </>\n                                            )\n                                        })}\n                                        <FormulaResult>\n                                            <FormulaValueResultSwapSynthetic>\n                                                <FormulaResultGreen>=</FormulaResultGreen>\n                                                {totalResult}\n                                            </FormulaValueResultSwapSynthetic>\n\n                                            <PointerContainerMobile>\n                                                <PointerDot />\n                                                <PointerStick />\n                                                <PointerTextMobile>\n                                                    {totalResultDesc}\n                                                </PointerTextMobile>\n                                            </PointerContainerMobile>\n                                        </FormulaResult>\n                                    </FormulaTopWrapper>\n                                </FormulaHighlight>\n                            </FormulaContainerMobileOneLine>\n                        )\n                    })}\n                </>\n            </Show.Mobile>\n        </>\n    )\n}\n\nCalculatedFormula.propTypes = {\n    data: PropTypes.object,\n}\n\nexport default CalculatedFormula\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ResultStrong } from './_style'\nimport CalculatedFormula from './_calculated-formula'\nimport { Header, Text } from 'components/elements/typography'\nimport { Container, SectionContainer, Flex } from 'components/containers'\nimport { localize, Localize } from 'components/localization'\nimport device from 'themes/device'\n\nconst StyledSection = styled(SectionContainer)`\n    padding: 0 0 8rem;\n    @media ${device.tabletL} {\n        padding: 40px 0;\n    }\n`\nconst TitleWrapper = styled(Flex)`\n    max-width: 120rem;\n    margin: 0 auto 2.4rem;\n\n    ${Text} {\n        max-width: 792px;\n        margin: 0 auto;\n    }\n\n    @media ${device.tabletL} {\n        margin: 0 auto 16px;\n\n        ${Header} {\n            font-size: 20px;\n            line-height: 25px;\n        }\n    }\n`\nconst StyledHeader = styled(Header)`\n    max-width: 1200px;\n    margin: 0 auto 24px;\n\n    @media ${device.mobileL} {\n        max-width: unset;\n        margin: 0 auto 16px;\n        text-align: left !important;\n    }\n`\nconst ExampleWrapper = styled(Flex)`\n    max-width: 120rem;\n    margin: 0 auto;\n    flex-direction: column;\n\n    @media ${device.laptopM} {\n        h1 {\n            text-align: center;\n        }\n    }\n`\nconst CalculationWrapper = styled(Flex)`\n    @media ${device.laptopM} {\n        flex-direction: column;\n    }\n`\nconst LeftWrapper = styled(Flex)`\n    width: 588px;\n    padding: 6.6rem 4rem 7.8rem;\n    background-color: var(--color-grey-39);\n    margin-right: 2.4rem;\n\n    @media (max-width: 1360px) {\n        width: 45%;\n    }\n\n    @media ${device.laptopM} {\n        width: 100%;\n        max-width: 58.8rem;\n        margin-right: 0;\n        margin-bottom: 0.8rem;\n        padding: 1.6rem;\n    }\n    @media ${device.tabletL} {\n        margin-bottom: 0;\n    }\n\n    ${Text} {\n        @media ${device.tabletL} {\n            max-width: 295px;\n        }\n    }\n`\nconst RightWrapper = styled(Flex)`\n    width: 588px;\n    flex-direction: column;\n\n    @media ${device.laptopM} {\n        width: 100%;\n        max-width: 58.8rem;\n    }\n`\nconst MinimumVolume = () => {\n    return (\n        <StyledSection>\n            <Container direction=\"column\">\n                <TitleWrapper direction=\"column\">\n                    <Header type=\"page-title\" align=\"center\" mb=\"0.8rem\">\n                        {localize('Minimum volume requirement')}\n                    </Header>\n                    <Text size=\"16px\" align=\"center\">\n                        <Localize translate_text=\"To receive the minimum commission (0.01 in any currency) allowed by the system, the minimum volume requirement is calculated based on the following formulas:\" />\n                    </Text>\n                </TitleWrapper>\n                <ExampleWrapper>\n                    <StyledHeader type=\"main-paragraph\" mb=\"2.4rem\">\n                        {localize('Example:')}\n                    </StyledHeader>\n                    <CalculationWrapper ai=\"center\" mb=\"24px\">\n                        <LeftWrapper>\n                            <Text size=\"16px\">\n                                <Localize translate_text=\"A deal for 1 lot of BTC/USD (with a BTC to USD exchange rate of USD 50,000) per USD 100,000 turnover will pay out a commission of USD 20. The minimum volume required to receive the minimum commission of USD 0.01 is determined using the following formula:\" />\n                            </Text>\n                        </LeftWrapper>\n                        <RightWrapper>\n                            <CalculatedFormula data={firstCalculatedFormula} />\n                        </RightWrapper>\n                    </CalculationWrapper>\n                    <CalculationWrapper ai=\"center\">\n                        <LeftWrapper>\n                            <Text size=\"16px\">\n                                <Localize translate_text=\"A deal for 1 lot of the Volatility Index 75 for a price of USD 500,000 per USD 100,000 turnover will pay out a commission of USD 5. The minimum volume required to receive the minimum commission of USD 0.01 is determined using the following formula:\" />\n                            </Text>\n                        </LeftWrapper>\n                        <RightWrapper>\n                            <CalculatedFormula data={secondCalculatedFormula} />\n                        </RightWrapper>\n                    </CalculationWrapper>\n                </ExampleWrapper>\n            </Container>\n        </StyledSection>\n    )\n}\n\nconst firstCalculatedFormula = {\n    list: [\n        {\n            totalItem: 3,\n            formula: [\n                {\n                    item: '(0.01',\n                    description: <Localize translate_text='Min. commission' />,\n                    next_operator: '✕',\n                },\n                {\n                    item: 'USD 100,000)',\n                    description: <Localize translate_text='Adjusted volume' />,\n                    next_operator: '÷',\n                },\n                {\n                    item: '20',\n                    description: <Localize translate_text='Commission rate' />,\n                },\n            ],\n            result: {\n                total: (\n                    <Localize\n                        translate_text=\"<0>USD 50</0> Volume\"\n                        components={[<ResultStrong key={0} />]}\n                    />\n                ),\n            },\n        },\n        {\n            totalItem: 2,\n            formula: [\n                {\n                    item: 'USD 50',\n                    description: <Localize translate_text='Volume' />,\n                    next_operator: '÷',\n                },\n                {\n                    item: 'USD 50,000',\n                    description: <Localize translate_text='Spot price' />,\n                },\n            ],\n            result: {\n                total: (\n                    <Localize\n                        translate_text=\"<0>0.001 lots</0>\"\n                        components={[<ResultStrong key={0} />]}\n                    />\n                ),\n                description: <Localize translate_text='Volume in lots' />,\n            },\n        },\n    ],\n}\n\nconst secondCalculatedFormula = {\n    list: [\n        {\n            totalItem: 3,\n            formula: [\n                {\n                    item: '(0.01',\n                    description: <Localize translate_text='Min. commission' />,\n                    next_operator: '✕',\n                },\n                {\n                    item: 'USD 100,000)',\n                    description: <Localize translate_text='Adjusted volume' />,\n                    next_operator: '÷',\n                },\n                {\n                    item: '5',\n                    description: <Localize translate_text='Commission rate' />,\n                },\n            ],\n            result: {\n                total: (\n                    <Localize\n                        translate_text=\"<0>USD 200</0> Volume\"\n                        components={[<ResultStrong key={0} />]}\n                    />\n                ),\n            },\n        },\n        {\n            totalItem: 2,\n            formula: [\n                {\n                    item: 'USD 200',\n                    description: <Localize translate_text='Volume' />,\n                    next_operator: '÷',\n                },\n                {\n                    item: 'USD 500,000',\n                    description: <Localize translate_text='Spot price' />,\n                },\n            ],\n            result: {\n                total: (\n                    <Localize\n                        translate_text=\"<0>0.0004 lots</0>\"\n                        components={[<ResultStrong key={0} />]}\n                    />\n                ),\n                description: <Localize translate_text='Volume in lots' />,\n            },\n        },\n    ],\n}\nexport default MinimumVolume\n"],"sourceRoot":""}